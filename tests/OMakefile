OUT=.exe
PPX=$(file ../ppx/ppx_implicits$(EXE))

OCamlRequire($(PPX) $(file ../lib/ppx_implicits.cmo))

OCAMLINCLUDES += ../lib

Test_(name, deps) =
  CMOS=$(addsuffix .cmo, $(deps))
  $(name)$(OUT) $(name).cmo $(name).cmi: $(name).ml $(PPX) $(CMOS)
    mkdir_if_not_exists(out)
    $(PPX) -I ../lib -debug $(name).ml > out/$(name).ml 
    ocamlc -I ../lib -ppx $(PPX) -i $(name).ml > out/$(name).mli
    ocamlc -I ../lib -ppx $(PPX) ppx_implicits.cmo $(CMOS) -o $(name)$(OUT) $(name).ml
  out/$(name).out: $(name)$(OUT)
    stdout = $(fopen out/$(name).out, w)
    stderr = stdout
    ./$(name)$(OUT)

  $(name)_test_ocamlfind$(OUT): $(name).ml $(CMOS)
    mkdir_if_not_exists(out)
    ocamlfind ocamlc -package ppx_implicits $(CMOS) -o $(name)_test_ocamlfind$(OUT) $(name).ml
  out/$(name)_test_ocamlfind.out: $(name)_test_ocamlfind$(OUT)
    stdout = $(fopen out/$(name)_test_ocamlfind.out, w)
    stderr = stdout
    ./$(name)_test_ocamlfind$(OUT)
  clean:
    rm -f $(name).cmi $(name).cmo $(name).cmt $(name)$(OUT) $(name)_test_ocamlfind$(OUT)
  export

# omake test_ocamlfind tests things using installed ppx_implicits
.PHONY: test_ocamlfind

Testx(name, deps) =
  Test_($(name), $(deps))
  .DEFAULT: out/$(name).out
  test_ocamlfind: out/$(name)_test_ocamlfind.out
  export

Test(name)=
  Testx($(name), $(EMPTY))
  export

Test(add)
Test(imp3)
Test(imp32)
Test(imp4)
Test(unshadow)
Test(just)
Test(aggressive)
Test_(adm, $(EMPTY)) # must fail to execute
Test(typeclass_expanded)
Test(typeclass)
Test(multiparam_expanded)
Test(multiparam)
Test(numdef)

# Test(readme)
# Test(constraint)
# Test(xformat)
# Test(double_use)
# Test(fvar)
# Test(nomodule)
# Test(kgap)
# Testx(numuse, numdef)
# Test(prelude)
# Test(monad_hk)
# # Test(highk)
# Test(length_class)
# Test(showc)
# Test(fcmod)
# Test(deriving)
# Test(packer)

clean::
    rm -rf out

PPX=$(file ../ppx/ppx_implicits$(EXE))
.SCANNER: scan-ocaml-%: $(PPX)
OCamlRequire($(PPX))

# OCAMLINCLUDES += ../lib ../ocaml

# FILES[] =
#    ../lib/meta_conv
#    ../ocaml/ocaml
#    ../ocaml/ocaml_conv
#    conv_test

%.out.ml: %.ml $(PPX)
  $(PPX) -debug $< > $@

Test_(name) =
  $(name)$(EXE): $(name).ml $(PPX)
    mkdir_if_not_exists(out)
    $(PPX) -debug $(name).ml > out/$(name).ml
    ocamlc -ppx $(PPX) -i $(name).ml > out/$(name).mli
    ocamlc -ppx $(PPX) -o $(name)$(EXE) $(name).ml
  out/$(name).out: $(name)$(EXE)
    stdout = $(fopen out/$(name).out, w)
    stderr = stdout
    ./$(name)$(EXE)

  $(name)_test_ocamlfind$(EXE): $(name).ml
    mkdir_if_not_exists(out)
    ocamlfind ocamlc -package ppx_implicits -o $(name)_test_ocamlfind$(EXE) $(name).ml
  out/$(name)_test_ocamlfind.out: $(name)_test_ocamlfind$(EXE)
    stdout = $(fopen out/$(name)_test_ocamlfind.out, w)
    stderr = stdout
    ./$(name)$(EXE)
  clean:
    rm -f $(name).cmi $(name).cmo $(name).cmt $(name)$(EXE)
  export

.PHONY: test_ocamlfind

Test(name) =
  Test_($(name))
  .DEFAULT: out/$(name).out
  test_ocamlfind: out/$(name)_test_ocamlfind.out
  export

Test(imp)
Test(imp1)
Test(imp2)
Test(imp3)
Test(imp31)
Test(imp4)
Test_(inacc) # must fail
Test(prop)
Test(typeclass)
Test(just)
Test(opened)
Test(template)
# Test(readme)

OUT=.exe
PPX=$(file ../../ppx/ppx_implicits$(EXE))
.SCANNER: scan-ocaml-%: $(PPX)
OCamlRequire($(PPX))

DERIVEDIR=$(shell ocamlfind query ppx_deriving)
DERIVE=-ppx "$(DERIVEDIR)/ppx_deriving$(EXE) $(DERIVEDIR)/ppx_deriving_show.cma" $(DERIVEDIR)/ppx_deriving_runtime.cma -I $(DERIVEDIR)

OCAMLDEPFLAGS= -ppx $(PPX)

%.out.ml: %.ml $(PPX)
  $(PPX) -debug $< > $@

Test_(name, deps) =
  CMOS=$(addsuffix .cmo, $(deps))
  $(name)$(OUT) $(name).cmo $(name).cmi: $(name).ml $(PPX) ../implicits.cmo $(CMOS)
    mkdir_if_not_exists(out)
    $(PPX) -debug $(name).ml > out/$(name).ml 
    ocamlc -ppx $(PPX) $(DERIVE) -i $(name).ml > out/$(name).mli
    ocamlc -ppx $(PPX) $(DERIVE) ../implicits.cmo $(CMOS) -o $(name)$(OUT) $(name).ml
  out/$(name).out: $(name)$(OUT)
    stdout = $(fopen out/$(name).out, w)
    stderr = stdout
    ./$(name)$(OUT)

  $(name)_test_ocamlfind$(OUT): $(name).ml ../implicits.cmo $(CMOS)
    mkdir_if_not_exists(out)
    ocamlfind ocamlc -package ppx_implicits ../implicits.cmo $(CMOS) -o $(name)_test_ocamlfind$(OUT) $(name).ml
  out/$(name)_test_ocamlfind.out: $(name)_test_ocamlfind$(OUT)
    stdout = $(fopen out/$(name)_test_ocamlfind.out, w)
    stderr = stdout
    ./$(name)_test_ocamlfind$(OUT)
  clean:
    rm -f $(name).cmi $(name).cmo $(name).cmt $(name)$(OUT) $(name)_test_ocamlfind$(OUT)
  export

# omake test_ocamlfind tests things using installed ppx_implicits
.PHONY: test_ocamlfind

Testx(name, deps) =
  Test_($(name), $(deps))
  .DEFAULT: out/$(name).out
  test_ocamlfind: out/$(name)_test_ocamlfind.out
  export

Test(name)=
  Testx($(name), $(EMPTY))
  export

Test(ppxderive)

Subdirs()
